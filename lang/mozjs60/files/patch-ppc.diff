--- build/build-clang/build-clang.py.orig
+++ build/build-clang/build-clang.py
@@ -503,9 +503,9 @@
 
     if is_darwin():
         extra_cflags = []
-        extra_cxxflags = ["-stdlib=libc++"]
+        extra_cxxflags = []
         extra_cflags2 = []
-        extra_cxxflags2 = ["-stdlib=libc++"]
+        extra_cxxflags2 = []
         extra_asmflags = []
         extra_ldflags = []
     elif is_linux():
--- build/clang-plugin/moz.build.orig
+++ build/clang-plugin/moz.build
@@ -62,8 +62,8 @@
 
 # libc++ is required to build plugins against clang on OS X.
 if CONFIG['HOST_OS_ARCH'] == 'Darwin':
-    CXXFLAGS += ['-stdlib=libc++']
-    LDFLAGS += ['-lc++']
+    CXXFLAGS += []
+    LDFLAGS += []
 
 DIRS += [
     'tests',
--- config/external/icu/data/icudata_gas.S.orig
+++ config/external/icu/data/icudata_gas.S
@@ -5,7 +5,7 @@
 #if defined(__linux__) && defined(__ELF__)
 .section .note.GNU-stack,"",%progbits
 #endif
-.global ICU_DATA_SYMBOL
+.globl ICU_DATA_SYMBOL
 .data
 .balign 16
 ICU_DATA_SYMBOL:
--- config/external/icu/data/moz.build.orig
+++ config/external/icu/data/moz.build
@@ -20,7 +20,7 @@
 
 ASFLAGS += [
     '-DICU_DATA_FILE="%s"' % CONFIG['ICU_DATA_FILE'],
-    '-DICU_DATA_SYMBOL=icudt%s_dat' % CONFIG['MOZ_ICU_VERSION'],
+    '-DICU_DATA_SYMBOL=_icudt%s_dat' % CONFIG['MOZ_ICU_VERSION'],
 ]
 LOCAL_INCLUDES += ['.']
 
--- intl/icu/source/common/putil.cpp.orig
+++ intl/icu/source/common/putil.cpp
@@ -136,6 +136,13 @@
 #endif
 
 /*
+ * Mac OS X 10.4 doesn't use its localtime_r() declaration in <time.h> if either _ANSI_SOURCE or _POSIX_C_SOURCE is #defined.
+ */
+#if defined(U_TZNAME) && U_PLATFORM_IS_DARWIN_BASED && (defined(_ANSI_SOURCE) || defined(_POSIX_C_SOURCE))
+U_CFUNC struct tm *localtime_r(const time_t *, struct tm *);
+#endif
+
+/*
  * Only include langinfo.h if we have a way to get the codeset. If we later
  * depend on more feature, we can test on U_HAVE_NL_LANGINFO.
  *
--- js/src/old-configure.orig
+++ js/src/old-configure
@@ -4939,7 +4939,7 @@
 *-darwin*)
     MOZ_OPTIMIZE_FLAGS="-O3 -fno-stack-protector"
     CFLAGS="$CFLAGS -fno-common"
-    CXXFLAGS="$CXXFLAGS -fno-common -stdlib=libc++"
+    CXXFLAGS="$CXXFLAGS -fno-common"
     DSO_LDOPTS=''
     STRIP="$STRIP -x -S"
     LDFLAGS="$LDFLAGS -lobjc"
@@ -6797,7 +6797,7 @@
 echo "$ac_t""$ac_cv_func_memcmp_clean" 1>&6
 test $ac_cv_func_memcmp_clean = no && LIBOBJS="$LIBOBJS memcmp.${ac_objext}"
 
-for ac_func in getc_unlocked _getc_nolock gmtime_r localtime_r pthread_getname_np
+for ac_func in getc_unlocked _getc_nolock gmtime_r localtime_r pthread_getname_np pthread_setname_np
 do
 echo $ac_n "checking for $ac_func""... $ac_c" 1>&6
 echo "configure:6804: checking for $ac_func" >&5
--- js/src/old-configure.in.orig
+++ js/src/old-configure.in
@@ -565,7 +565,7 @@
 *-darwin*)
     MOZ_OPTIMIZE_FLAGS="-O3 -fno-stack-protector"
     CFLAGS="$CFLAGS -fno-common"
-    CXXFLAGS="$CXXFLAGS -fno-common -stdlib=libc++"
+    CXXFLAGS="$CXXFLAGS -fno-common"
     DSO_LDOPTS=''
     STRIP="$STRIP -x -S"
     LDFLAGS="$LDFLAGS -lobjc"
@@ -1082,7 +1082,7 @@
 dnl ========================================================
 AC_PROG_GCC_TRADITIONAL
 AC_FUNC_MEMCMP
-AC_CHECK_FUNCS([getc_unlocked _getc_nolock gmtime_r localtime_r pthread_getname_np])
+AC_CHECK_FUNCS([getc_unlocked _getc_nolock gmtime_r localtime_r pthread_getname_np pthread_setname_np])
 
 dnl check for clock_gettime(), the CLOCK_MONOTONIC clock
 dnl avoid this on Darwin, since depending on your system config, we may think
--- js/src/build/moz.build.orig
+++ js/src/build/moz.build
@@ -47,6 +47,9 @@
     'zlib',
 ]
 
+if CONFIG['MOZ_NEEDS_LIBATOMIC']:
+    OS_LIBS += ['atomic']
+
 if CONFIG['OS_ARCH'] not in ('WINNT', 'HP-UX'):
     OS_LIBS += [
         'm',
--- js/src/frontend/NameCollections.h.orig
+++ js/src/frontend/NameCollections.h
@@ -103,8 +103,6 @@
   };
 
   static void assertInvariant() {
-    static_assert(sizeof(Wrapped) <= sizeof(uint64_t),
-                  "Can only recycle atom maps with values smaller than uint64");
   }
 
   RecyclableAtomMapValueWrapper() { assertInvariant(); }
@@ -139,12 +141,6 @@
  public:
   template <typename Table>
   static void assertInvariants() {
-    static_assert(
-        Table::SizeOfInlineEntries == RepresentativeTable::SizeOfInlineEntries,
-        "Only tables with the same size for inline entries are usable in the "
-        "pool.");
-    static_assert(mozilla::IsPod<typename Table::Table::Entry>::value,
-                  "Only tables with POD values are usable in the pool.");
   }
 };
 
--- js/src/jit/Ion.h.orig
+++ js/src/jit/Ion.h
@@ -41,10 +41,6 @@
 using mozilla::Err;
 using mozilla::Ok;
 
-static_assert(sizeof(AbortReasonOr<Ok>) <= sizeof(uintptr_t),
-              "Unexpected size of AbortReasonOr<Ok>");
-static_assert(sizeof(AbortReasonOr<bool>) <= sizeof(uintptr_t),
-              "Unexpected size of AbortReasonOr<bool>");
 
 // A JIT context is needed to enter into either an JIT method or an instance
 // of a JIT compiler. It points to a temporary allocator and the active
--- js/src/threading/posix/Thread.cpp.orig
+++ js/src/threading/posix/Thread.cpp
@@ -152,9 +152,11 @@
   name = nameBuf;
 #endif
 
-  int rv;
+  int rv = 0;
 #ifdef XP_DARWIN
+#ifdef HAVE_PTHREAD_SETNAME_NP
   rv = pthread_setname_np(name);
+#endif
 #elif defined(__DragonFly__) || defined(__FreeBSD__) || defined(__OpenBSD__)
   pthread_set_name_np(pthread_self(), name);
   rv = 0;
--- js/src/ds/MemoryProtectionExceptionHandler.cpp.orig
+++ js/src/ds/MemoryProtectionExceptionHandler.cpp
@@ -11,7 +11,7 @@
 
 #if defined(XP_WIN)
 #include "util/Windows.h"
-#elif defined(XP_UNIX) && !defined(XP_DARWIN)
+#elif defined(XP_UNIX) && (defined(__POWERPC__) || !defined(XP_DARWIN))
 #include <signal.h>
 #include <sys/types.h>
 #include <unistd.h>
@@ -204,7 +204,7 @@
   }
 }
 
-#elif defined(XP_UNIX) && !defined(XP_DARWIN)
+#elif defined(XP_UNIX) && (defined(__POWERPC__) || !defined(XP_DARWIN))
 
 static struct sigaction sPrevSEGVHandler = {};
 
--- js/src/gc/GC.cpp.orig
+++ js/src/gc/GC.cpp
@@ -389,8 +389,6 @@
                 #sizedType " is smaller than SortedArenaList::MinThingSize!"); \
   static_assert(sizeof(sizedType) >= sizeof(FreeSpan),                         \
                 #sizedType " is smaller than FreeSpan");                       \
-  static_assert(sizeof(sizedType) % CellAlignBytes == 0,                       \
-                "Size of " #sizedType " is not a multiple of CellAlignBytes"); \
   static_assert(sizeof(sizedType) >= MinCellSize,                              \
                 "Size of " #sizedType " is smaller than the minimum size");
 FOR_EACH_ALLOCKIND(CHECK_THING_SIZE);
--- js/src/vm/JSContext.h.orig
+++ js/src/vm/JSContext.h
@@ -586,7 +586,7 @@
   void disableProfilerSampling() { suppressProfilerSampling = true; }
   void enableProfilerSampling() { suppressProfilerSampling = false; }
 
-#if defined(XP_DARWIN)
+#if defined(XP_DARWIN) && !defined(__POWERPC__)
   js::wasm::MachExceptionHandler wasmMachExceptionHandler;
 #endif
 
--- js/src/wasm/WasmSignalHandlers.cpp.orig
+++ js/src/wasm/WasmSignalHandlers.cpp
@@ -400,7 +400,7 @@
 // the same as CONTEXT, but on Mac we use a different structure since we call
 // into the emulator code from a Mach exception handler rather than a
 // sigaction-style signal handler.
-#if defined(XP_DARWIN)
+#if defined(XP_DARWIN) && !defined(__POWERPC__)
 #if defined(__x86_64__)
 struct macos_x64_context {
   x86_thread_state64_t thread;
@@ -488,7 +488,7 @@
 #endif
 #endif  // KNOWS_MACHINE_STATE
 
-#if defined(XP_DARWIN)
+#if defined(XP_DARWIN) && !defined(__POWERPC__)
 
 static uint8_t** ContextToPC(EMULATOR_CONTEXT* context) {
 #if defined(__x86_64__)
@@ -1160,7 +1160,7 @@
   return EXCEPTION_CONTINUE_SEARCH;
 }
 
-#elif defined(XP_DARWIN)
+#elif defined(XP_DARWIN) && !defined(__POWERPC__)
 #include <mach/exc.h>
 
 // This definition was generated by mig (the Mach Interface Generator) for the
@@ -1717,7 +1717,7 @@
 #endif
   if (!AddVectoredExceptionHandler(firstHandler, WasmFaultHandler))
     return false;
-#elif defined(XP_DARWIN)
+#elif defined(XP_DARWIN) && !defined(__POWERPC__)
   // OSX handles seg faults via the Mach exception handler above, so don't
   // install WasmFaultHandler.
 #else
@@ -1761,7 +1761,7 @@
   // Nothing to do if the platform doesn't support it.
   if (!ProcessHasSignalHandlers()) return true;
 
-#if defined(XP_DARWIN)
+#if defined(XP_DARWIN) && !defined(__POWERPC__)
   // On OSX, each JSContext which runs wasm gets its own handler thread.
   if (!cx->wasmMachExceptionHandler.installed() &&
       !cx->wasmMachExceptionHandler.install(cx))
--- memory/build/zone.c.orig
+++ memory/build/zone.c
@@ -340,7 +340,6 @@
   // malloc_default_purgeable_zone is called beforehand so that the
   // default purgeable zone is created when the default zone is still
   // a scalable_zone.
-  malloc_zone_t* purgeable_zone = malloc_default_purgeable_zone();
 
   // There is a problem related to the above with the system nano zone, which
   // is hard to work around from here, and that is instead worked around by
@@ -370,8 +369,6 @@
     // On OSX >= 10.6, unregistering replaces the purgeable zone with the last
     // registered zone above, i.e the default zone. Registering it again then
     // puts it at the end, obviously after the default zone.
-    malloc_zone_unregister(purgeable_zone);
-    malloc_zone_register(purgeable_zone);
     default_zone = get_default_zone();
   } while (default_zone != &zone);
 }
--- mfbt/tests/TestResult.cpp.orig
+++ mfbt/tests/TestResult.cpp
@@ -29,18 +29,10 @@
 enum Foo8 : uint8_t {};
 enum Foo16 : uint16_t {};
 enum Foo32 : uint32_t {};
-static_assert(sizeof(Result<Ok, Foo8>) <= sizeof(uintptr_t),
-              "Result with small types should be pointer-sized");
-static_assert(sizeof(Result<Ok, Foo16>) <= sizeof(uintptr_t),
-              "Result with small types should be pointer-sized");
 static_assert(sizeof(Foo32) >= sizeof(uintptr_t) ||
               sizeof(Result<Ok, Foo32>) <= sizeof(uintptr_t),
               "Result with small types should be pointer-sized");
 
-static_assert(sizeof(Result<Foo16, Foo8>) <= sizeof(uintptr_t),
-              "Result with small types should be pointer-sized");
-static_assert(sizeof(Result<Foo8, Foo16>) <= sizeof(uintptr_t),
-              "Result with small types should be pointer-sized");
 static_assert(sizeof(Foo32) >= sizeof(uintptr_t) ||
               sizeof(Result<Foo32, Foo16>) <= sizeof(uintptr_t),
               "Result with small types should be pointer-sized");
--- python/mozbuild/mozbuild/configure/constants.py.orig
+++ python/mozbuild/mozbuild/configure/constants.py
@@ -80,8 +80,8 @@
     ('ia64', '__ia64__'),
     ('s390x', '__s390x__'),
     ('s390', '__s390__'),
-    ('ppc64', '__powerpc64__'),
-    ('ppc', '__powerpc__'),
+    ('ppc64', '__powerpc64__ || __POWERPC64__'),
+    ('ppc', '__powerpc__ || __POWERPC__'),
     ('Alpha', '__alpha__'),
     ('hppa', '__hppa__'),
     ('sparc64', '__sparc__ && __arch64__'),
