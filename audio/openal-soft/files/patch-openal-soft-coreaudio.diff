--- alc/backends/coreaudio.cpp.orig
+++ alc/backends/coreaudio.cpp
@@ -40,6 +40,13 @@
 #include <AudioUnit/AudioUnit.h>
 #include <AudioToolbox/AudioToolbox.h>
 
+#ifndef LEGACY_COREAUDIO
+#if (defined(__ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__) && __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ < 1060)
+#define LEGACY_COREAUDIO 1
+#else
+#define LEGACY_COREAUDIO 0
+#endif
+#endif
 
 namespace {
 
@@ -77,7 +83,11 @@
 CoreAudioPlayback::~CoreAudioPlayback()
 {
     AudioUnitUninitialize(mAudioUnit);
+#if LEGACY_COREAUDIO
+    CloseComponent(mAudioUnit);
+#else
     AudioComponentInstanceDispose(mAudioUnit);
+#endif
 }
 
 
@@ -103,7 +113,11 @@
             name};
 
     /* open the default output unit */
+#if LEGACY_COREAUDIO
+    ComponentDescription desc{};
+#else
     AudioComponentDescription desc{};
+#endif
     desc.componentType = kAudioUnitType_Output;
 #if TARGET_OS_IOS
     desc.componentSubType = kAudioUnitSubType_RemoteIO;
@@ -114,11 +128,19 @@
     desc.componentFlags = 0;
     desc.componentFlagsMask = 0;
 
+#if LEGACY_COREAUDIO
+    Component comp{FindNextComponent(NULL, &desc)};
+#else
     AudioComponent comp{AudioComponentFindNext(NULL, &desc)};
+#endif
     if(comp == nullptr)
         throw al::backend_exception{al::backend_error::NoDevice, "Could not find audio component"};
 
+#if LEGACY_COREAUDIO
+    OSStatus err{OpenAComponent(comp, &mAudioUnit)};
+#else
     OSStatus err{AudioComponentInstanceNew(comp, &mAudioUnit)};
+#endif
     if(err != noErr)
         throw al::backend_exception{al::backend_error::NoDevice,
             "Could not create component instance: %u", err};
@@ -329,7 +351,11 @@
 CoreAudioCapture::~CoreAudioCapture()
 {
     if(mAudioUnit)
+#if LEGACY_COREAUDIO
+        CloseComponent(mAudioUnit);
+#else
         AudioComponentInstanceDispose(mAudioUnit);
+#endif
     mAudioUnit = 0;
 }
 
@@ -387,10 +413,18 @@
     AudioStreamBasicDescription hardwareFormat;   // The hardware format
     AudioStreamBasicDescription outputFormat;     // The AudioUnit output format
     AURenderCallbackStruct input;
+#if LEGACY_COREAUDIO
+    ComponentDescription desc;
+#else
     AudioComponentDescription desc;
+#endif
     UInt32 propertySize;
     UInt32 enableIO;
+#if LEGACY_COREAUDIO
+    Component comp;
+#else
     AudioComponent comp;
+#endif
     OSStatus err;
 
     if(!name)
@@ -410,12 +444,20 @@
     desc.componentFlagsMask = 0;
 
     // Search for component with given description
+#if LEGACY_COREAUDIO
+    comp = FindNextComponent(NULL, &desc);
+#else
     comp = AudioComponentFindNext(NULL, &desc);
+#endif
     if(comp == NULL)
         throw al::backend_exception{al::backend_error::NoDevice, "Could not find audio component"};
 
     // Open the component
+#if LEGACY_COREAUDIO
+    err = OpenAComponent(comp, &mAudioUnit);
+#else
     err = AudioComponentInstanceNew(comp, &mAudioUnit);
+#endif
     if(err != noErr)
         throw al::backend_exception{al::backend_error::NoDevice,
             "Could not create component instance: %u", err};
@@ -475,12 +517,14 @@
             "Could not set capture callback: %u", err};
 
     // Disable buffer allocation for capture
+#if !LEGACY_COREAUDIO
     UInt32 flag{0};
     err = AudioUnitSetProperty(mAudioUnit, kAudioUnitProperty_ShouldAllocateBuffer,
         kAudioUnitScope_Output, 1, &flag, sizeof(flag));
     if(err != noErr)
         throw al::backend_exception{al::backend_error::DeviceError,
             "Could not disable buffer allocation property: %u", err};
+#endif
 
     // Initialize the device
     err = AudioUnitInitialize(mAudioUnit);
